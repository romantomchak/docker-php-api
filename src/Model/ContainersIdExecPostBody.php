<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Docker\API\Model;

class ContainersIdExecPostBody
{
    /**
     * Attach to `stdin` of the exec command.
     *
     * @var bool
     */
    protected $attachStdin;
    /**
     * Attach to `stdout` of the exec command.
     *
     * @var bool
     */
    protected $attachStdout;
    /**
     * Attach to `stderr` of the exec command.
     *
     * @var bool
     */
    protected $attachStderr;
    /**
     * Override the key sequence for detaching a container. Format is.
     *
     * @var string
     */
    protected $detachKeys;
    /**
     * Allocate a pseudo-TTY.
     *
     * @var bool
     */
    protected $tty;
    /**
     * A list of environment variables in the form `["VAR=value", ...]`.
     *
     * @var string[]
     */
    protected $env;
    /**
     * Command to run, as a string or array of strings.
     *
     * @var string[]
     */
    protected $cmd;
    /**
     * Runs the exec process with extended privileges.
     *
     * @var bool
     */
    protected $privileged = false;
    /**
     * The user, and optionally, group to run the exec process inside.
     *
     * @var string
     */
    protected $user;
    /**
     * The working directory for the exec process inside the container.
     *
     * @var string
     */
    protected $workingDir;

    /**
     * Attach to `stdin` of the exec command.
     */
    public function getAttachStdin(): ?bool
    {
        return $this->attachStdin;
    }

    /**
     * Attach to `stdin` of the exec command.
     */
    public function setAttachStdin(?bool $attachStdin): self
    {
        $this->attachStdin = $attachStdin;

        return $this;
    }

    /**
     * Attach to `stdout` of the exec command.
     */
    public function getAttachStdout(): ?bool
    {
        return $this->attachStdout;
    }

    /**
     * Attach to `stdout` of the exec command.
     */
    public function setAttachStdout(?bool $attachStdout): self
    {
        $this->attachStdout = $attachStdout;

        return $this;
    }

    /**
     * Attach to `stderr` of the exec command.
     */
    public function getAttachStderr(): ?bool
    {
        return $this->attachStderr;
    }

    /**
     * Attach to `stderr` of the exec command.
     */
    public function setAttachStderr(?bool $attachStderr): self
    {
        $this->attachStderr = $attachStderr;

        return $this;
    }

    /**
     * Override the key sequence for detaching a container. Format is.
     */
    public function getDetachKeys(): ?string
    {
        return $this->detachKeys;
    }

    /**
     * Override the key sequence for detaching a container. Format is.
     */
    public function setDetachKeys(?string $detachKeys): self
    {
        $this->detachKeys = $detachKeys;

        return $this;
    }

    /**
     * Allocate a pseudo-TTY.
     */
    public function getTty(): ?bool
    {
        return $this->tty;
    }

    /**
     * Allocate a pseudo-TTY.
     */
    public function setTty(?bool $tty): self
    {
        $this->tty = $tty;

        return $this;
    }

    /**
     * A list of environment variables in the form `["VAR=value", ...]`.
     *
     * @return string[]|null
     */
    public function getEnv(): ?array
    {
        return $this->env;
    }

    /**
     * A list of environment variables in the form `["VAR=value", ...]`.
     *
     * @param string[]|null $env
     */
    public function setEnv(?array $env): self
    {
        $this->env = $env;

        return $this;
    }

    /**
     * Command to run, as a string or array of strings.
     *
     * @return string[]|null
     */
    public function getCmd(): ?array
    {
        return $this->cmd;
    }

    /**
     * Command to run, as a string or array of strings.
     *
     * @param string[]|null $cmd
     */
    public function setCmd(?array $cmd): self
    {
        $this->cmd = $cmd;

        return $this;
    }

    /**
     * Runs the exec process with extended privileges.
     */
    public function getPrivileged(): ?bool
    {
        return $this->privileged;
    }

    /**
     * Runs the exec process with extended privileges.
     */
    public function setPrivileged(?bool $privileged): self
    {
        $this->privileged = $privileged;

        return $this;
    }

    /**
     * The user, and optionally, group to run the exec process inside.
     */
    public function getUser(): ?string
    {
        return $this->user;
    }

    /**
     * The user, and optionally, group to run the exec process inside.
     */
    public function setUser(?string $user): self
    {
        $this->user = $user;

        return $this;
    }

    /**
     * The working directory for the exec process inside the container.
     */
    public function getWorkingDir(): ?string
    {
        return $this->workingDir;
    }

    /**
     * The working directory for the exec process inside the container.
     */
    public function setWorkingDir(?string $workingDir): self
    {
        $this->workingDir = $workingDir;

        return $this;
    }
}
