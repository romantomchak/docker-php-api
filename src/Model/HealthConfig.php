<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Docker\API\Model;

class HealthConfig
{
    /**
     * The test to perform. Possible values are:.
     *
     * @var string[]
     */
    protected $test;
    /**
     * The time to wait between checks in nanoseconds. It should be 0 or at.
     *
     * @var int
     */
    protected $interval;
    /**
     * The time to wait before considering the check to have hung. It should.
     *
     * @var int
     */
    protected $timeout;
    /**
     * The number of consecutive failures needed to consider a container as.
     *
     * @var int
     */
    protected $retries;
    /**
     * Start period for the container to initialize before starting.
     *
     * @var int
     */
    protected $startPeriod;

    /**
     * The test to perform. Possible values are:.
     *
     * @return string[]|null
     */
    public function getTest(): ?array
    {
        return $this->test;
    }

    /**
     * The test to perform. Possible values are:.
     *
     * @param string[]|null $test
     */
    public function setTest(?array $test): self
    {
        $this->test = $test;

        return $this;
    }

    /**
     * The time to wait between checks in nanoseconds. It should be 0 or at.
     */
    public function getInterval(): ?int
    {
        return $this->interval;
    }

    /**
     * The time to wait between checks in nanoseconds. It should be 0 or at.
     */
    public function setInterval(?int $interval): self
    {
        $this->interval = $interval;

        return $this;
    }

    /**
     * The time to wait before considering the check to have hung. It should.
     */
    public function getTimeout(): ?int
    {
        return $this->timeout;
    }

    /**
     * The time to wait before considering the check to have hung. It should.
     */
    public function setTimeout(?int $timeout): self
    {
        $this->timeout = $timeout;

        return $this;
    }

    /**
     * The number of consecutive failures needed to consider a container as.
     */
    public function getRetries(): ?int
    {
        return $this->retries;
    }

    /**
     * The number of consecutive failures needed to consider a container as.
     */
    public function setRetries(?int $retries): self
    {
        $this->retries = $retries;

        return $this;
    }

    /**
     * Start period for the container to initialize before starting.
     */
    public function getStartPeriod(): ?int
    {
        return $this->startPeriod;
    }

    /**
     * Start period for the container to initialize before starting.
     */
    public function setStartPeriod(?int $startPeriod): self
    {
        $this->startPeriod = $startPeriod;

        return $this;
    }
}
