<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Docker\API\Model;

class ServiceSpecUpdateConfig
{
    /**
     * Maximum number of tasks to be updated in one iteration (0 means.
     *
     * @var int
     */
    protected $parallelism;
    /**
     * Amount of time between updates, in nanoseconds.
     *
     * @var int
     */
    protected $delay;
    /**
     * Action to take if an updated task fails to run, or stops running.
     *
     * @var string
     */
    protected $failureAction;
    /**
     * Amount of time to monitor each updated task for failures, in.
     *
     * @var int
     */
    protected $monitor;
    /**
     * The fraction of tasks that may fail during an update before the.
     *
     * @var float
     */
    protected $maxFailureRatio = 0;
    /**
     * The order of operations when rolling out an updated task. Either.
     *
     * @var string
     */
    protected $order;

    /**
     * Maximum number of tasks to be updated in one iteration (0 means.
     */
    public function getParallelism(): ?int
    {
        return $this->parallelism;
    }

    /**
     * Maximum number of tasks to be updated in one iteration (0 means.
     */
    public function setParallelism(?int $parallelism): self
    {
        $this->parallelism = $parallelism;

        return $this;
    }

    /**
     * Amount of time between updates, in nanoseconds.
     */
    public function getDelay(): ?int
    {
        return $this->delay;
    }

    /**
     * Amount of time between updates, in nanoseconds.
     */
    public function setDelay(?int $delay): self
    {
        $this->delay = $delay;

        return $this;
    }

    /**
     * Action to take if an updated task fails to run, or stops running.
     */
    public function getFailureAction(): ?string
    {
        return $this->failureAction;
    }

    /**
     * Action to take if an updated task fails to run, or stops running.
     */
    public function setFailureAction(?string $failureAction): self
    {
        $this->failureAction = $failureAction;

        return $this;
    }

    /**
     * Amount of time to monitor each updated task for failures, in.
     */
    public function getMonitor(): ?int
    {
        return $this->monitor;
    }

    /**
     * Amount of time to monitor each updated task for failures, in.
     */
    public function setMonitor(?int $monitor): self
    {
        $this->monitor = $monitor;

        return $this;
    }

    /**
     * The fraction of tasks that may fail during an update before the.
     */
    public function getMaxFailureRatio(): ?float
    {
        return $this->maxFailureRatio;
    }

    /**
     * The fraction of tasks that may fail during an update before the.
     */
    public function setMaxFailureRatio(?float $maxFailureRatio): self
    {
        $this->maxFailureRatio = $maxFailureRatio;

        return $this;
    }

    /**
     * The order of operations when rolling out an updated task. Either.
     */
    public function getOrder(): ?string
    {
        return $this->order;
    }

    /**
     * The order of operations when rolling out an updated task. Either.
     */
    public function setOrder(?string $order): self
    {
        $this->order = $order;

        return $this;
    }
}
