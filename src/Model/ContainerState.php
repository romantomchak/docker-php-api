<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Docker\API\Model;

class ContainerState
{
    /**
     * String representation of the container state. Can be one of "created",.
     *
     * @var string
     */
    protected $status;
    /**
     * Whether this container is running.
     *
     * @var bool
     */
    protected $running;
    /**
     * Whether this container is paused.
     *
     * @var bool
     */
    protected $paused;
    /**
     * Whether this container is restarting.
     *
     * @var bool
     */
    protected $restarting;
    /**
     * Whether this container has been killed because it ran out of memory.
     *
     * @var bool
     */
    protected $oOMKilled;
    /**
     * @var bool
     */
    protected $dead;
    /**
     * The process ID of this container.
     *
     * @var int
     */
    protected $pid;
    /**
     * The last exit code of this container.
     *
     * @var int
     */
    protected $exitCode;
    /**
     * @var string
     */
    protected $error;
    /**
     * The time when this container was last started.
     *
     * @var string
     */
    protected $startedAt;
    /**
     * The time when this container last exited.
     *
     * @var string
     */
    protected $finishedAt;
    /**
     * Health stores information about the container's healthcheck results.
     *
     * @var Health
     */
    protected $health;

    /**
     * String representation of the container state. Can be one of "created",.
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * String representation of the container state. Can be one of "created",.
     */
    public function setStatus(?string $status): self
    {
        $this->status = $status;

        return $this;
    }

    /**
     * Whether this container is running.
     */
    public function getRunning(): ?bool
    {
        return $this->running;
    }

    /**
     * Whether this container is running.
     */
    public function setRunning(?bool $running): self
    {
        $this->running = $running;

        return $this;
    }

    /**
     * Whether this container is paused.
     */
    public function getPaused(): ?bool
    {
        return $this->paused;
    }

    /**
     * Whether this container is paused.
     */
    public function setPaused(?bool $paused): self
    {
        $this->paused = $paused;

        return $this;
    }

    /**
     * Whether this container is restarting.
     */
    public function getRestarting(): ?bool
    {
        return $this->restarting;
    }

    /**
     * Whether this container is restarting.
     */
    public function setRestarting(?bool $restarting): self
    {
        $this->restarting = $restarting;

        return $this;
    }

    /**
     * Whether this container has been killed because it ran out of memory.
     */
    public function getOOMKilled(): ?bool
    {
        return $this->oOMKilled;
    }

    /**
     * Whether this container has been killed because it ran out of memory.
     */
    public function setOOMKilled(?bool $oOMKilled): self
    {
        $this->oOMKilled = $oOMKilled;

        return $this;
    }

    public function getDead(): ?bool
    {
        return $this->dead;
    }

    public function setDead(?bool $dead): self
    {
        $this->dead = $dead;

        return $this;
    }

    /**
     * The process ID of this container.
     */
    public function getPid(): ?int
    {
        return $this->pid;
    }

    /**
     * The process ID of this container.
     */
    public function setPid(?int $pid): self
    {
        $this->pid = $pid;

        return $this;
    }

    /**
     * The last exit code of this container.
     */
    public function getExitCode(): ?int
    {
        return $this->exitCode;
    }

    /**
     * The last exit code of this container.
     */
    public function setExitCode(?int $exitCode): self
    {
        $this->exitCode = $exitCode;

        return $this;
    }

    public function getError(): ?string
    {
        return $this->error;
    }

    public function setError(?string $error): self
    {
        $this->error = $error;

        return $this;
    }

    /**
     * The time when this container was last started.
     */
    public function getStartedAt(): ?string
    {
        return $this->startedAt;
    }

    /**
     * The time when this container was last started.
     */
    public function setStartedAt(?string $startedAt): self
    {
        $this->startedAt = $startedAt;

        return $this;
    }

    /**
     * The time when this container last exited.
     */
    public function getFinishedAt(): ?string
    {
        return $this->finishedAt;
    }

    /**
     * The time when this container last exited.
     */
    public function setFinishedAt(?string $finishedAt): self
    {
        $this->finishedAt = $finishedAt;

        return $this;
    }

    /**
     * Health stores information about the container's healthcheck results.
     */
    public function getHealth(): ?Health
    {
        return $this->health;
    }

    /**
     * Health stores information about the container's healthcheck results.
     */
    public function setHealth(?Health $health): self
    {
        $this->health = $health;

        return $this;
    }
}
