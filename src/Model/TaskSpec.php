<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Docker\API\Model;

class TaskSpec
{
    /**
     * Plugin spec for the service.  *(Experimental release only.)*.

    > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are
     *
     * @var TaskSpecPluginSpec
     */
    protected $pluginSpec;
    /**
     * Container spec for the service.

    > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are
     *
     * @var TaskSpecContainerSpec
     */
    protected $containerSpec;
    /**
     * Read-only spec type for non-swarm containers attached to swarm overlay.

    > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are
     *
     * @var TaskSpecNetworkAttachmentSpec
     */
    protected $networkAttachmentSpec;
    /**
     * Resource requirements which apply to each individual container created.
     *
     * @var TaskSpecResources
     */
    protected $resources;
    /**
     * Specification for the restart policy which applies to containers.
     *
     * @var TaskSpecRestartPolicy
     */
    protected $restartPolicy;
    /**
     * @var TaskSpecPlacement
     */
    protected $placement;
    /**
     * A counter that triggers an update even if no relevant parameters have.
     *
     * @var int
     */
    protected $forceUpdate;
    /**
     * Runtime is the type of runtime specified for the task executor.
     *
     * @var string
     */
    protected $runtime;
    /**
     * Specifies which networks the service should attach to.
     *
     * @var NetworkAttachmentConfig[]
     */
    protected $networks;
    /**
     * Specifies the log driver to use for tasks created from this spec. If.
     *
     * @var TaskSpecLogDriver
     */
    protected $logDriver;

    /**
     * Plugin spec for the service.  *(Experimental release only.)*.

    > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are
    > mutually exclusive. PluginSpec is only used when the Runtime field
    > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime
    > field is set to `attachment`.
     */
    public function getPluginSpec(): ?TaskSpecPluginSpec
    {
        return $this->pluginSpec;
    }

    /**
     * Plugin spec for the service.  *(Experimental release only.)*.

    > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are
    > mutually exclusive. PluginSpec is only used when the Runtime field
    > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime
    > field is set to `attachment`.
     */
    public function setPluginSpec(?TaskSpecPluginSpec $pluginSpec): self
    {
        $this->pluginSpec = $pluginSpec;

        return $this;
    }

    /**
     * Container spec for the service.

    > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are
    > mutually exclusive. PluginSpec is only used when the Runtime field
    > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime
    > field is set to `attachment`.
     */
    public function getContainerSpec(): ?TaskSpecContainerSpec
    {
        return $this->containerSpec;
    }

    /**
     * Container spec for the service.

    > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are
    > mutually exclusive. PluginSpec is only used when the Runtime field
    > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime
    > field is set to `attachment`.
     */
    public function setContainerSpec(?TaskSpecContainerSpec $containerSpec): self
    {
        $this->containerSpec = $containerSpec;

        return $this;
    }

    /**
     * Read-only spec type for non-swarm containers attached to swarm overlay.

    > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are
    > mutually exclusive. PluginSpec is only used when the Runtime field
    > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime
    > field is set to `attachment`.
     */
    public function getNetworkAttachmentSpec(): ?TaskSpecNetworkAttachmentSpec
    {
        return $this->networkAttachmentSpec;
    }

    /**
     * Read-only spec type for non-swarm containers attached to swarm overlay.

    > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are
    > mutually exclusive. PluginSpec is only used when the Runtime field
    > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime
    > field is set to `attachment`.
     */
    public function setNetworkAttachmentSpec(?TaskSpecNetworkAttachmentSpec $networkAttachmentSpec): self
    {
        $this->networkAttachmentSpec = $networkAttachmentSpec;

        return $this;
    }

    /**
     * Resource requirements which apply to each individual container created.
     */
    public function getResources(): ?TaskSpecResources
    {
        return $this->resources;
    }

    /**
     * Resource requirements which apply to each individual container created.
     */
    public function setResources(?TaskSpecResources $resources): self
    {
        $this->resources = $resources;

        return $this;
    }

    /**
     * Specification for the restart policy which applies to containers.
     */
    public function getRestartPolicy(): ?TaskSpecRestartPolicy
    {
        return $this->restartPolicy;
    }

    /**
     * Specification for the restart policy which applies to containers.
     */
    public function setRestartPolicy(?TaskSpecRestartPolicy $restartPolicy): self
    {
        $this->restartPolicy = $restartPolicy;

        return $this;
    }

    public function getPlacement(): ?TaskSpecPlacement
    {
        return $this->placement;
    }

    public function setPlacement(?TaskSpecPlacement $placement): self
    {
        $this->placement = $placement;

        return $this;
    }

    /**
     * A counter that triggers an update even if no relevant parameters have.
     */
    public function getForceUpdate(): ?int
    {
        return $this->forceUpdate;
    }

    /**
     * A counter that triggers an update even if no relevant parameters have.
     */
    public function setForceUpdate(?int $forceUpdate): self
    {
        $this->forceUpdate = $forceUpdate;

        return $this;
    }

    /**
     * Runtime is the type of runtime specified for the task executor.
     */
    public function getRuntime(): ?string
    {
        return $this->runtime;
    }

    /**
     * Runtime is the type of runtime specified for the task executor.
     */
    public function setRuntime(?string $runtime): self
    {
        $this->runtime = $runtime;

        return $this;
    }

    /**
     * Specifies which networks the service should attach to.
     *
     * @return NetworkAttachmentConfig[]|null
     */
    public function getNetworks(): ?array
    {
        return $this->networks;
    }

    /**
     * Specifies which networks the service should attach to.
     *
     * @param NetworkAttachmentConfig[]|null $networks
     */
    public function setNetworks(?array $networks): self
    {
        $this->networks = $networks;

        return $this;
    }

    /**
     * Specifies the log driver to use for tasks created from this spec. If.
     */
    public function getLogDriver(): ?TaskSpecLogDriver
    {
        return $this->logDriver;
    }

    /**
     * Specifies the log driver to use for tasks created from this spec. If.
     */
    public function setLogDriver(?TaskSpecLogDriver $logDriver): self
    {
        $this->logDriver = $logDriver;

        return $this;
    }
}
